<?php
/*
Plugin Name:    RED Meeting Timezone Calculator
Description:    Meeting Timezone Calculator Plugin
Author:         Jamie Bergen
Author URI:     https://jamiebergen.com/
License:        GPL-2.0+
License URI:    http://www.gnu.org/licenses/gpl-2.0.txt
*/

add_action( 'admin_menu', 'mtgtz_admin_menu' );

function mtgtz_admin_menu() {
	add_management_page( 'Meeting Timezones Tool', 'Meeting Timezones', 'manage_options', 'red-mtg-tz-calc/red-mtg-tz-calc.php', 'mtgtz_admin_page' );
}

function mtgtz_admin_page(){ ?>

    <h1 class="mtgtz-heading">Use this tool to calculate meeting timezones.</h1>
    <div id="mtg-tz-container"></div>
	<?php
}

// Load this last so that #mtg-tz-container exists
add_action( 'admin_enqueue_scripts', 'red_mtg_tz_enqueue_scripts', 99999 );
function red_mtg_tz_enqueue_scripts( $hook ) {

	// Load only on ?page=mypluginname
    if($hook != 'tools_page_red-mtg-tz-calc/red-mtg-tz-calc') {
    	return;
    }

	wp_enqueue_style( 'red-mtg-tz', plugin_dir_url( __FILE__ ) . 'red-mtg-tz-calc.css' );

    // Enqueue scripts generated by React
    // Need to deal with cache-breaking hashes
    // https://css-tricks.com/hashes-in-wordpress-assets-with-enqueue/
    $dirJS = new DirectoryIterator(plugin_dir_path( __FILE__ ) . 'build/static/js');

    foreach ($dirJS as $file) {

        if (pathinfo($file, PATHINFO_EXTENSION) === 'js') {
            $fullName = basename($file);
            $name = substr(basename($fullName), 0, strpos(basename($fullName), '.'));

            wp_enqueue_script( $name, plugin_dir_url( __FILE__ ) . 'build/static/js/' . $fullName, array(), '0', true );

        }

    }

    $dirCSS = new DirectoryIterator(plugin_dir_path( __FILE__ ) . 'build/static/css');

    foreach ($dirCSS as $file) {

        if (pathinfo($file, PATHINFO_EXTENSION) === 'css') {
            $fullName = basename($file);
            $name = substr(basename($fullName), 0, strpos(basename($fullName), '.'));

            wp_enqueue_style( $name, plugin_dir_url( __FILE__ ) . 'build/static/css/' . $fullName );

        }

    }

}


// Set up user meta field for user to enter their timezone
// Ref: http://justintadlock.com/archives/2009/09/10/adding-and-using-custom-user-profile-fields

add_action( 'show_user_profile', 'red_show_extra_profile_fields' );
add_action( 'edit_user_profile', 'red_show_extra_profile_fields' );

function red_show_extra_profile_fields( $user ) { ?>

	<h3>Extra profile information</h3>

    <?php
    $user_tz = get_user_meta( $user->ID, 'user_timezone', 1 );

    if ( empty( $user_tz ) ) { // Use the site's timzone setting if not set for user
        $user_tz = get_option('timezone_string');
    }?>
    
    <table class="form-table">
        <th scope="row"><label for="timezone_string"><?php _e('User Timezone') ?></label></th>
        <td>
            <select id="timezone_string" name="timezone_string" aria-describedby="timezone-description">
                <?php echo wp_timezone_choice( $user_tz, get_user_locale() ); ?>
            </select>

            <p class="description" id="timezone-description"><?php _e( 'Choose either a city in the same timezone as you or a UTC timezone offset.' ); ?></p>
        </td>
    </table>

<?php }

add_action( 'personal_options_update', 'red_save_extra_profile_fields' );
add_action( 'edit_user_profile_update', 'red_save_extra_profile_fields' );

function red_save_extra_profile_fields( $user_id ) {

	if ( !current_user_can( 'edit_user', $user_id ) ) {
		return false;
	}
		
	update_user_meta( $user_id, 'user_timezone', $_POST['timezone_string'] );

}


// Make user_timezone user meta value available to rest API
add_action( 'rest_api_init', 'create_api_user_meta_field' );
 
function create_api_user_meta_field() {
 
     register_rest_field( 'user', 'user_timezone', array(
           'get_callback'    => 'get_user_meta_for_api',
           'schema'          => null,
        )
    );
}
 
function get_user_meta_for_api( $object ) {
    //get the id of the user object array
    $user_id = $object['id'];
 
    //return the user meta
    return get_user_meta( $user_id, 'user_timezone', 1 );
}

// Includes all users in API result even if they haven't published posts
add_filter( 'rest_user_query', 'red_remove_has_published_posts_from_wp_api_user_query', 10, 2 );
/**
 * Removes `has_published_posts` from the query args so even users who have not
 * published content are returned by the request.
 *
 * @see https://developer.wordpress.org/reference/classes/wp_user_query/
 *
 * @param array           $prepared_args Array of arguments for WP_User_Query.
 * @param WP_REST_Request $request       The current request.
 *
 * @return array
 */
function red_remove_has_published_posts_from_wp_api_user_query( $prepared_args, $request ) {
    unset( $prepared_args['has_published_posts'] );

    return $prepared_args;
}
